<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
    <name>vCircle</name>
    <doxygen-group>processing</doxygen-group>
    <description>Event-driven Circle Detection using the Hough Transform</description>
    <copypolicy>Released under the terms of the GNU GPL v2.0</copypolicy>
    <version>1.0</version>

    <description-long>
      The module detects circles in address events and/or flow events using a circular Hough transform.
    </description-long>

    <arguments>
        <param desc="Specifies the stem name of ports created by the module." default="vCircle"> name </param>
        <param desc="Sets both input and ouput ports to use strict protocols." default="false"> strict </param>
        <param desc="Processes events one at a time rather than batching all events in a bottle." default="false"> everyevent </param>
        <param desc="Use multiple threads (equal to the amount of circle sizes to detect)." default="false"> parallel </param>
        <param desc="Number of pixels on the x-axis of the sensor." default=""> width </param>
        <param desc="Number of pixels on the y-axis of the sensor." default=""> height </param>
        <param desc="Threshold strength for a confirmed circle detection." default=""> inlierThreshold </param>
        <param desc="Type of event-queue or FIFO used in processing. Options are fixed, time, life, edge" default="edge"> qType </param>
        <param desc="The length in events or milliseconds of the qType used." default="1000"> fifo </param>
        <param desc="The arc length of the directed transform in degrees. Setting it to 0 uses a full transform." default="1"> arc </param>
        <param desc="Minimum circle size to detect." default="10"> radmin </param>
        <param desc="Maximum circle size to detect." default="35"> radmax </param>
        <switch>verbosity</switch>
    </arguments>

    <authors>
        <author email="arren.glover@iit.it"> Arren Glover </author>
    </authors>

     <data>
        <input>
            <type>eventdriven::vBottle</type>
            <port carrier="tcp">/vCircle/vBottle:i</port>
            <required>yes</required>
            <priority>no</priority>
            <description>
                Accepts the address events and/or flow events in the vBottle
                container
            </description>
        </input>
        <output>
            <type>eventdriven::vBottle</type>
            <port carrier="tcp">/vCircle/vBottle:o</port>
            <description>
                Outputs the cirlce detections in the form of an
                eventdriven::ClusterEventGauss. The vBottle also contains all
                events in the vBottle received as input.
            </description>
        </output>
        <output>
            <type>yarp::os::Bottle</type>
            <port carrier="fast_tcp">/vCircle/scope:o</port>
            <description>
                Outputs debug information for use with yarpscope. The gap
                between input bottle numbers is written to detect data being
                lost.
            </description>
        </output>
        <output>
            <type>yarp::sig::Image</type>
            <port carrier="fast_tcp">/vCirlce/debug:o</port>
            <description>
                Outputs a debugging images displaying events in the event-queue
                as well as the strength of the Hough transform from the same
                events.
            </description>
        </output>
        <output>
            <type>yarp::os::Bottle</type>
            <port carrier="tcp">/vCircle/dump:o</port>
            <description>
                Outputs a dump of detections for experiment analysis. The format
                 is "Time Offset | Event Timestamp | X | Y | R | Score".
            </description>
        </output>
    </data>

<!--    <services>
      <server>
        <port carrier="tcp">/motionCUT/rpc</port>
        <description>
            The parameters winSize, recogThres, adjNodesThres, blobMinSizeThres, framesPersistence, cropSize,
            numThreads, verbosity can be changed/retrieved through the commands set/get. Moreover, the further
            switch inhibition can be accessed in order to enable/disable the motion detection at run-time.
        </description>
      </server>
    </services>-->
</module>
